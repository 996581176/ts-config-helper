{
  "files": {
    "message": "如果 tsconfig.JSON 中不存在“files ”或“include ”属性，则编译器默认包含包含目录和子目录中的所有文件，但“exclude ”指定的文件除外。如果指定了“files ”属性，则只包含这些文件和由“include ”指定的文件。"
  },
  "exclude": {
    "message": "指定要从编译中排除的文件列表。“Exclude ”属性仅影响通过“Include ”属性包含的文件，而不影响“Files ”属性。Glob 模式需要 TypeScript 版本 2.0 或更高版本。"
  },
  "include": {
    "message": "指定与要包含在编译中的文件相匹配的 glob 模式的列表。如果 tsconfig.JSON 中不存在“files ”或“include ”属性，则编译器默认包含包含目录和子目录中的所有文件，但“exclude ”指定的文件除外。需要 TypeScript 2.0 或更高版本。"
  },
  "compileOnSave": {
    "message": "对此项目启用保存时编译。"
  },
  "extends": {
    "message": "要从中继承的基本配置文件的路径。需要 TypeScript 版本 2.1 或更高版本。"
  },
  "references": {
    "message": "引用的项目。需要 TypeScript 3.0 或更高版本。"
  },
  "buildOptions.dry": {
    "message": "~"
  },
  "buildOptions.force": {
    "message": "构建所有项目，包括那些看起来是最新的项目。",
    "link": " https://www.typescriptlang.org/tsconfig#force"
  },
  "buildOptions.verbose": {
    "message": "启用详细日志记录。",
    "link": " https://www.typescriptlang.org/tsconfig#verbose"
  },
  "buildOptions.incremental": {
    "message": "保存.tsbuildinfo 文件以允许项目的增量编译。",
    "link": " https://www.typescriptlang.org/tsconfig#incremental"
  },
  "buildOptions.assumeChangesOnlyAffectDirectDependencies": {
    "message": "在使用“增量”和“监视”模式的项目中重新编译时，假设文件中的更改只会直接影响依赖于它的文件。",
    "link": " https://www.typescriptlang.org/tsconfig#assumeChangesOnlyAffectDirectDependencies"
  },
  "buildOptions.traceResolution": {
    "message": "在“ModuleResolution ”过程中使用的日志路径。",
    "link": " https://www.typescriptlang.org/tsconfig#traceResolution"
  },
  "buildOptions": {},
  "watchOptions.watchFile": {
    "message": "指定 TypeScript 监视模式的工作方式。",
    "link": " https://www.typescriptlang.org/tsconfig#watchFile"
  },
  "watchOptions.watchDirectory": {
    "message": "指定如何在缺少递归文件监视功能的系统上监视目录。",
    "link": " https://www.typescriptlang.org/tsconfig#watchDirectory"
  },
  "watchOptions.fallbackPolling": {
    "message": "指定系统用完本机文件监视器时监视器应使用的方法。",
    "link": " https://www.typescriptlang.org/tsconfig#fallbackPolling"
  },
  "watchOptions.synchronousWatchDirectory": {
    "message": "在本机不支持递归监视的平台上，同步调用回调并更新目录监视器的状态。",
    "link": " https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory"
  },
  "watchOptions.excludeFiles": {
    "message": "从监视模式的处理中删除文件列表。",
    "link": " https://www.typescriptlang.org/tsconfig#excludeFiles"
  },
  "watchOptions.excludeDirectories": {
    "message": "从监视进程中删除目录列表。",
    "link": " https://www.typescriptlang.org/tsconfig#excludeDirectories"
  },
  "watchOptions": {
    "message": "TypeScript 中监视模式的设置。"
  },
  "compilerOptions.allowArbitraryExtensions": {
    "message": "如果存在声明文件，则允许导入具有任何扩展名的文件。",
    "link": " https://www.typescriptlang.org/tsconfig#allowArbitraryExtensions"
  },
  "compilerOptions.allowImportingTsExtensions": {
    "message": "允许导入包含 TypeScript 文件扩展名。",
    "link": " https://www.typescriptlang.org/tsconfig#allowImportingTsExtensions"
  },
  "compilerOptions.charset": {
    "message": "不再支持。在早期版本中，手动设置读取文件的文本编码。",
    "link": " https://www.typescriptlang.org/tsconfig#charset"
  },
  "compilerOptions.composite": {
    "message": "启用允许 TypeScript 项目与项目引用一起使用的约束。",
    "link": " https://www.typescriptlang.org/tsconfig#composite"
  },
  "compilerOptions.customConditions": {
    "message": "解析导入时除解析器特定的默认值之外要设置的条件。",
    "link": " https://www.typescriptlang.org/tsconfig#customConditions"
  },
  "compilerOptions.declaration": {
    "message": "从项目中的 TypeScript 和 JavaScript 文件生成.d.ts 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#declaration"
  },
  "compilerOptions.declarationDir": {
    "message": "为生成的声明文件指定输出目录。",
    "link": " https://www.typescriptlang.org/tsconfig#declarationDir"
  },
  "compilerOptions.diagnostics": {
    "message": "生成后输出编译器性能信息。",
    "link": " https://www.typescriptlang.org/tsconfig#diagnostics"
  },
  "compilerOptions.disableReferencedProjectLoad": {
    "message": "减少 TypeScript 自动加载的项目数量。",
    "link": " https://www.typescriptlang.org/tsconfig#disableReferencedProjectLoad"
  },
  "compilerOptions.noPropertyAccessFromIndexSignature": {
    "message": "对使用索引类型声明的键强制使用索引访问器。",
    "link": " https://www.typescriptlang.org/tsconfig#noPropertyAccessFromIndexSignature"
  },
  "compilerOptions.emitBOM": {
    "message": "在输出文件的开头发出 UTF-8 字节顺序标记（BOM）。",
    "link": " https://www.typescriptlang.org/tsconfig#emitBOM"
  },
  "compilerOptions.emitDeclarationOnly": {
    "message": "仅输出 D.TS 文件，不输出 JavaScript 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#emitDeclarationOnly"
  },
  "compilerOptions.exactOptionalPropertyTypes": {
    "message": "将可选属性类型解释为书面形式，而不是添加“未定义”。",
    "link": " https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes"
  },
  "compilerOptions.incremental": {
    "message": "启用增量编译。需要 TypeScript 3.4 或更高版本。"
  },
  "compilerOptions.tsBuildInfoFile": {
    "message": "指定.TSBuildInfo 增量编译文件的文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#tsBuildInfoFile"
  },
  "compilerOptions.inlineSourceMap": {
    "message": "在发出的 JavaScript 中包含 SourceMap 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#inlineSourceMap"
  },
  "compilerOptions.inlineSources": {
    "message": "在发出的 JavaScript 内的 SourceMaps 中包含源代码。",
    "link": " https://www.typescriptlang.org/tsconfig#inlineSources"
  },
  "compilerOptions.jsx": {
    "message": "指定生成的 JSX 代码。"
  },
  "compilerOptions.reactNamespace": {
    "message": "指定为“createElement ”调用的对象。这仅适用于以“REACT ”JSX EMIT 为目标时。",
    "link": " https://www.typescriptlang.org/tsconfig#reactNamespace"
  },
  "compilerOptions.jsxFactory": {
    "message": "指定以 React JSX Emit 为目标时使用的 JSX 工厂函数，例如' react.createElement '或' H '。",
    "link": " https://www.typescriptlang.org/tsconfig#jsxFactory"
  },
  "compilerOptions.jsxFragmentFactory": {
    "message": "指定以 React JSX Emit 为目标时用于片段的 JSX 片段引用，例如' react.fragment '或' fragment '。",
    "link": " https://www.typescriptlang.org/tsconfig#jsxFragmentFactory"
  },
  "compilerOptions.jsxImportSource": {
    "message": "使用 `jsx：react-jsx` 时，指定用于导入 JSX 工厂函数的模块说明符。",
    "link": " https://www.typescriptlang.org/tsconfig#jsxImportSource"
  },
  "compilerOptions.listFiles": {
    "message": "打印编译期间读取的所有文件。",
    "link": " https://www.typescriptlang.org/tsconfig#listFiles"
  },
  "compilerOptions.mapRoot": {
    "message": "指定调试器应查找映射文件的位置，而不是生成的位置。",
    "link": " https://www.typescriptlang.org/tsconfig#mapRoot"
  },
  "compilerOptions.module": {
    "message": "指定生成的模块代码。",
    "link": " https://www.typescriptlang.org/tsconfig#module"
  },
  "compilerOptions.moduleDetection": {
    "message": "控制用什么方式检测一个 JS 文件是否为模块。"
  },
  "compilerOptions.moduleResolution": {
    "message": "指定 TypeScript 如何从给定的模块说明符查找文件。",
    "link": " https://www.typescriptlang.org/tsconfig#moduleResolution"
  },
  "compilerOptions.moduleSuffixes": {
    "message": "解析模块时要搜索的文件名后缀的列表。",
    "link": " https://www.typescriptlang.org/tsconfig#moduleSuffixes"
  },
  "compilerOptions.newLine": {
    "message": "设置发射文件的换行符。",
    "link": " https://www.typescriptlang.org/tsconfig#newLine"
  },
  "compilerOptions.noEmit": {
    "message": "禁止从编译中发出文件。",
    "link": " https://www.typescriptlang.org/tsconfig#noEmit"
  },
  "compilerOptions.noEmitHelpers": {
    "message": "禁止在编译输出中生成自定义辅助函数，如“扩展”。",
    "link": " https://www.typescriptlang.org/tsconfig#noEmitHelpers"
  },
  "compilerOptions.noEmitOnError": {
    "message": "如果报告了任何类型检查错误，则禁用发出文件。",
    "link": " https://www.typescriptlang.org/tsconfig#noEmitOnError"
  },
  "compilerOptions.noImplicitAny": {
    "message": "为隐含“任何”类型的表达式和声明启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitAny"
  },
  "compilerOptions.noImplicitThis": {
    "message": "当给定“this ”的类型为“any ”时，启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitThis"
  },
  "compilerOptions.noUnusedLocals": {
    "message": "未读取局部变量时启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noUnusedLocals"
  },
  "compilerOptions.noUnusedParameters": {
    "message": "未读取函数参数时引发错误。",
    "link": " https://www.typescriptlang.org/tsconfig#noUnusedParameters"
  },
  "compilerOptions.noLib": {
    "message": "禁止包括任何库文件，包括默认的 lib.d.ts.",
    "link": " https://www.typescriptlang.org/tsconfig#noLib"
  },
  "compilerOptions.noResolve": {
    "message": "禁止“import ”、“require ”或“<reference>'s ”扩展 TypeScript 应添加到项目中的文件数量。",
    "link": " https://www.typescriptlang.org/tsconfig#noResolve"
  },
  "compilerOptions.noStrictGenericChecks": {
    "message": "在函数类型中禁用对泛型签名的严格检查。",
    "link": " https://www.typescriptlang.org/tsconfig#noStrictGenericChecks"
  },
  "compilerOptions.skipDefaultLibCheck": {
    "message": "跳过 TypeScript 附带的.d.ts 文件的类型检查。",
    "link": " https://www.typescriptlang.org/tsconfig#skipDefaultLibCheck"
  },
  "compilerOptions.skipLibCheck": {
    "message": "跳过对所有.d.ts 文件的类型检查。",
    "link": " https://www.typescriptlang.org/tsconfig#skipLibCheck"
  },
  "compilerOptions.outFile": {
    "message": "指定将所有输出捆绑到一个 JavaScript 文件中的文件。如果“declaration ”为 true，则还指定捆绑所有.d.ts 输出的文件。",
    "link": " https://www.typescriptlang.org/tsconfig#outFile"
  },
  "compilerOptions.outDir": {
    "message": "为所有发出的文件指定输出文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#outDir"
  },
  "compilerOptions.preserveConstEnums": {
    "message": "在生成的代码中禁用删除“const num ”声明。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveConstEnums"
  },
  "compilerOptions.preserveSymlinks": {
    "message": "禁用将符号链接解析到其 realpath.这与节点中的相同标志相关。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveSymlinks"
  },
  "compilerOptions.preserveValueImports": {
    "message": "在 JavaScript 输出中保留未使用的导入值，否则这些值将被删除。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveValueImports"
  },
  "compilerOptions.preserveWatchOutput": {
    "message": "在“监视”模式下禁用擦除控制台。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveWatchOutput"
  },
  "compilerOptions.pretty": {
    "message": "在 TypeScript 的输出中启用颜色和格式，以使编译器错误更易于阅读。",
    "link": " https://www.typescriptlang.org/tsconfig#pretty"
  },
  "compilerOptions.removeComments": {
    "message": "禁用发出注释。",
    "link": " https://www.typescriptlang.org/tsconfig#removeComments"
  },
  "compilerOptions.rootDir": {
    "message": "指定源文件中的根文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#rootDir"
  },
  "compilerOptions.isolatedModules": {
    "message": "确保每个文件都可以安全地传输，而不依赖于其他导入。",
    "link": " https://www.typescriptlang.org/tsconfig#isolatedModules"
  },
  "compilerOptions.sourceMap": {
    "message": "为发出的 JavaScript 文件创建源映射文件。",
    "link": " https://www.typescriptlang.org/tsconfig#sourceMap"
  },
  "compilerOptions.sourceRoot": {
    "message": "指定调试器查找引用源代码的根路径。",
    "link": " https://www.typescriptlang.org/tsconfig#sourceRoot"
  },
  "compilerOptions.suppressExcessPropertyErrors": {
    "message": "禁止在创建对象文本期间报告过多的属性错误。",
    "link": " https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors"
  },
  "compilerOptions.suppressImplicitAnyIndexErrors": {
    "message": "为缺少索引签名的对象编制索引时隐藏“noimplicitany ”错误。",
    "link": " https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors"
  },
  "compilerOptions.stripInternal": {
    "message": "禁用在其 JSDoc 注释中包含“@internal ”的发出声明。",
    "link": " https://www.typescriptlang.org/tsconfig#stripInternal"
  },
  "compilerOptions.target": {
    "message": "为发出的 JavaScript 设置 JavaScript 语言版本，并包含兼容的库声明。",
    "link": " https://www.typescriptlang.org/tsconfig#target"
  },
  "compilerOptions.useUnknownInCatchVariables": {
    "message": "默认 catch 子句变量为“unknown ”而不是“any ”。",
    "link": " https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables"
  },
  "compilerOptions.experimentalDecorators": {
    "message": "启用对 TC39 阶段 2 草稿修饰符的实验性支持。",
    "link": " https://www.typescriptlang.org/tsconfig#experimentalDecorators"
  },
  "compilerOptions.emitDecoratorMetadata": {
    "message": "为源文件中的修饰声明发出设计类型元数据。",
    "link": " https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"
  },
  "compilerOptions.allowUnusedLabels": {
    "message": "禁用未使用标签的错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#allowUnusedLabels"
  },
  "compilerOptions.noImplicitReturns": {
    "message": "为未在函数中显式返回的代码路径启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitReturns"
  },
  "compilerOptions.noUncheckedIndexedAccess": {
    "message": "使用索引访问时，将“undefined ”添加到类型中。",
    "link": " https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess"
  },
  "compilerOptions.noFallthroughCasesInSwitch": {
    "message": "为 switch 语句中的故障情况启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch"
  },
  "compilerOptions.noImplicitOverride": {
    "message": "确保用 override 修饰符标记派生类中的重写成员。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitOverride"
  },
  "compilerOptions.allowUnreachableCode": {
    "message": "对无法访问的代码禁用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#allowUnreachableCode"
  },
  "compilerOptions.forceConsistentCasingInFileNames": {
    "message": "确保进口套管正确。",
    "link": " https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames"
  },
  "compilerOptions.generateCpuProfile": {
    "message": "发出编译器运行的 V8 CPU 配置文件以进行调试。",
    "link": " https://www.typescriptlang.org/tsconfig#generateCpuProfile"
  },
  "compilerOptions.baseUrl": {
    "message": "指定用于解析非相对模块名称的基目录。",
    "link": " https://www.typescriptlang.org/tsconfig#baseUrl"
  },
  "compilerOptions.paths": {
    "message": "指定将导入重新映射到其他查找位置的一组条目。",
    "link": " https://www.typescriptlang.org/tsconfig#paths"
  },
  "compilerOptions.plugins": {
    "message": "指定要包含的语言服务插件的列表。",
    "link": " https://www.typescriptlang.org/tsconfig#plugins"
  },
  "compilerOptions.rootDirs": {
    "message": "允许在解析模块时将多个文件夹视为一个文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#rootDirs"
  },
  "compilerOptions.typeRoots": {
    "message": "指定多个类似于“./node_ 模块/@types ”的文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#typeRoots"
  },
  "compilerOptions.types": {
    "message": "指定要在源文件中包含但不引用的类型包名称。",
    "link": " https://www.typescriptlang.org/tsconfig#types"
  },
  "compilerOptions.traceResolution": {
    "message": "启用名称解析过程的跟踪。需要 TypeScript 2.0 或更高版本。"
  },
  "compilerOptions.allowJs": {
    "message": "允许 JavaScript 文件成为程序的一部分。使用“checkjs ”选项从这些文件中获取错误。",
    "link": " https://www.typescriptlang.org/tsconfig#allowJs"
  },
  "compilerOptions.noErrorTruncation": {
    "message": "在错误消息中禁用截断类型。",
    "link": " https://www.typescriptlang.org/tsconfig#noErrorTruncation"
  },
  "compilerOptions.allowSyntheticDefaultImports": {
    "message": "当模块没有默认导出时，允许“从 Y 导入 X ”。",
    "link": " https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports"
  },
  "compilerOptions.noImplicitUseStrict": {
    "message": "禁止在发出的 JavaScript 文件中添加“使用严格”指令。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitUseStrict"
  },
  "compilerOptions.listEmittedFiles": {
    "message": "在编译后打印发出的文件的名称。",
    "link": " https://www.typescriptlang.org/tsconfig#listEmittedFiles"
  },
  "compilerOptions.disableSizeLimit": {
    "message": "删除 TypeScript 语言服务器中 JavaScript 文件的总源代码大小的 20MB 上限。",
    "link": " https://www.typescriptlang.org/tsconfig#disableSizeLimit"
  },
  "compilerOptions.lib": {
    "message": "指定一组描述目标运行时环境的捆绑库声明文件。",
    "link": " https://www.typescriptlang.org/tsconfig#lib"
  },
  "compilerOptions.strictNullChecks": {
    "message": "检查类型时，请考虑“null ”和“undefined ”。",
    "link": " https://www.typescriptlang.org/tsconfig#strictNullChecks"
  },
  "compilerOptions.maxNodeModuleJsDepth": {
    "message": "指定用于从“节点 _ 模块”检查 JavaScript 文件的最大文件夹深度。仅适用于“allowjs ”。",
    "link": " https://www.typescriptlang.org/tsconfig#maxNodeModuleJsDepth"
  },
  "compilerOptions.importHelpers": {
    "message": "允许在每个项目中从 TSLIB 导入一次帮助程序函数，而不是在每个文件中包含它们。",
    "link": " https://www.typescriptlang.org/tsconfig#importHelpers"
  },
  "compilerOptions.importsNotUsedAsValues": {
    "message": "为仅用于类型的导入指定发出/检查行为。"
  },
  "compilerOptions.alwaysStrict": {
    "message": "确保始终发出“use strict ”。",
    "link": " https://www.typescriptlang.org/tsconfig#alwaysStrict"
  },
  "compilerOptions.strict": {
    "message": "启用所有严格类型检查选项。",
    "link": " https://www.typescriptlang.org/tsconfig#strict"
  },
  "compilerOptions.strictBindCallApply": {
    "message": "检查“bind ”、“call ”和“apply ”方法的参数是否与原始函数匹配。",
    "link": " https://www.typescriptlang.org/tsconfig#strictBindCallApply"
  },
  "compilerOptions.downlevelIteration": {
    "message": "为迭代生成更兼容，但冗长且性能较低的 JavaScript.",
    "link": " https://www.typescriptlang.org/tsconfig#downlevelIteration"
  },
  "compilerOptions.checkJs": {
    "message": "在类型检查的 JavaScript 文件中启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#checkJs"
  },
  "compilerOptions.strictFunctionTypes": {
    "message": "分配函数时，请检查以确保参数和返回值是子类型兼容的。",
    "link": " https://www.typescriptlang.org/tsconfig#strictFunctionTypes"
  },
  "compilerOptions.strictPropertyInitialization": {
    "message": "检查已声明但未在构造函数中设置的类属性。",
    "link": " https://www.typescriptlang.org/tsconfig#strictPropertyInitialization"
  },
  "compilerOptions.esModuleInterop": {
    "message": "发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。这将为类型兼容性启用“AllowSyntheticDefaultImports ”。",
    "link": " https://www.typescriptlang.org/tsconfig#esModuleInterop"
  },
  "compilerOptions.allowUmdGlobalAccess": {
    "message": "允许从模块访问 UMD 全局变量。",
    "link": " https://www.typescriptlang.org/tsconfig#allowUmdGlobalAccess"
  },
  "compilerOptions.keyofStringsOnly": {
    "message": "使 KeyOf 只返回字符串，而不是字符串、数字或符号。传统选项。",
    "link": " https://www.typescriptlang.org/tsconfig#keyofStringsOnly"
  },
  "compilerOptions.useDefineForClassFields": {
    "message": "发出符合 ECMAScript 标准的类字段。",
    "link": " https://www.typescriptlang.org/tsconfig#useDefineForClassFields"
  },
  "compilerOptions.declarationMap": {
    "message": "为 D.TS 文件创建源映射。",
    "link": " https://www.typescriptlang.org/tsconfig#declarationMap"
  },
  "compilerOptions.resolveJsonModule": {
    "message": "启用导入.JSON 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#resolveJsonModule"
  },
  "compilerOptions.resolvePackageJsonExports": {
    "message": "解析包导入时使用 package.JSON “exports ”字段。",
    "link": " https://www.typescriptlang.org/tsconfig#resolvePackageJsonExports"
  },
  "compilerOptions.resolvePackageJsonImports": {
    "message": "解析导入时使用 package.JSON ' Imports '字段。",
    "link": " https://www.typescriptlang.org/tsconfig#resolvePackageJsonImports"
  },
  "compilerOptions.verbatimModuleSyntax": {
    "message": "不要转换或忽略任何未标记为仅类型的导入或导出，确保根据“模块”设置以输出文件的格式写入它们。",
    "link": " https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax"
  },
  "compilerOptions.assumeChangesOnlyAffectDirectDependencies": {
    "message": "在“--incremental ”和“--watch ”中重新编译时，假设文件中的更改只会影响直接依赖于它的文件。需要 TypeScript 3.8 或更高版本。"
  },
  "compilerOptions.extendedDiagnostics": {
    "message": "生成后输出更详细的编译器性能信息。",
    "link": " https://www.typescriptlang.org/tsconfig#extendedDiagnostics"
  },
  "compilerOptions.disableSourceOfProjectReferenceRedirect": {
    "message": "禁止在引用复合项目时首选源文件而不是声明文件。",
    "link": " https://www.typescriptlang.org/tsconfig#disableSourceOfProjectReferenceRedirect"
  },
  "compilerOptions.disableSolutionSearching": {
    "message": "编辑时将项目从多项目引用检查中选择出来。",
    "link": " https://www.typescriptlang.org/tsconfig#disableSolutionSearching"
  },
  "compilerOptions": {
    "message": "指示 TypeScript 编译器如何编译.ts 文件。"
  },
  "typeAcquisition.enable": {
    "message": "启用自动类型获取"
  },
  "typeAcquisition.include": {
    "message": "指定要包含在自动类型获取中的类型声明列表。前。[“jQuery ”，“lodash ”]"
  },
  "typeAcquisition.exclude": {
    "message": "指定要从自动类型获取中排除的类型声明列表。前。[“jQuery ”，“lodash ”]"
  },
  "typeAcquisition": {
    "message": "此项目的自动类型（.d.ts）获取选项。需要 TypeScript 版本 2.1 或更高版本。"
  },
  "ts-node.compiler": {
    "message": "指定自定义 TypeScript 编译器。"
  },
  "ts-node.compilerHost": {
    "message": "使用 TypeScript 的编译器主机 API，而不是语言服务 API."
  },
  "ts-node.compilerOptions.allowArbitraryExtensions": {
    "message": "如果存在声明文件，则允许导入具有任何扩展名的文件。",
    "link": " https://www.typescriptlang.org/tsconfig#allowArbitraryExtensions"
  },
  "ts-node.compilerOptions.allowImportingTsExtensions": {
    "message": "允许导入包含 TypeScript 文件扩展名。",
    "link": " https://www.typescriptlang.org/tsconfig#allowImportingTsExtensions"
  },
  "ts-node.compilerOptions.charset": {
    "message": "不再支持。在早期版本中，手动设置读取文件的文本编码。",
    "link": " https://www.typescriptlang.org/tsconfig#charset"
  },
  "ts-node.compilerOptions.composite": {
    "message": "启用允许 TypeScript 项目与项目引用一起使用的约束。",
    "link": " https://www.typescriptlang.org/tsconfig#composite"
  },
  "ts-node.compilerOptions.customConditions": {
    "message": "解析导入时除解析器特定的默认值之外要设置的条件。",
    "link": " https://www.typescriptlang.org/tsconfig#customConditions"
  },
  "ts-node.compilerOptions.declaration": {
    "message": "从项目中的 TypeScript 和 JavaScript 文件生成.d.ts 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#declaration"
  },
  "ts-node.compilerOptions.declarationDir": {
    "message": "为生成的声明文件指定输出目录。",
    "link": " https://www.typescriptlang.org/tsconfig#declarationDir"
  },
  "ts-node.compilerOptions.diagnostics": {
    "message": "生成后输出编译器性能信息。",
    "link": " https://www.typescriptlang.org/tsconfig#diagnostics"
  },
  "ts-node.compilerOptions.disableReferencedProjectLoad": {
    "message": "减少 TypeScript 自动加载的项目数量。",
    "link": " https://www.typescriptlang.org/tsconfig#disableReferencedProjectLoad"
  },
  "ts-node.compilerOptions.noPropertyAccessFromIndexSignature": {
    "message": "对使用索引类型声明的键强制使用索引访问器。",
    "link": " https://www.typescriptlang.org/tsconfig#noPropertyAccessFromIndexSignature"
  },
  "ts-node.compilerOptions.emitBOM": {
    "message": "在输出文件的开头发出 UTF-8 字节顺序标记（BOM）。",
    "link": " https://www.typescriptlang.org/tsconfig#emitBOM"
  },
  "ts-node.compilerOptions.emitDeclarationOnly": {
    "message": "仅输出 D.TS 文件，不输出 JavaScript 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#emitDeclarationOnly"
  },
  "ts-node.compilerOptions.exactOptionalPropertyTypes": {
    "message": "将可选属性类型解释为书面形式，而不是添加“未定义”。",
    "link": " https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes"
  },
  "ts-node.compilerOptions.incremental": {
    "message": "启用增量编译。需要 TypeScript 3.4 或更高版本。"
  },
  "ts-node.compilerOptions.tsBuildInfoFile": {
    "message": "指定.TSBuildInfo 增量编译文件的文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#tsBuildInfoFile"
  },
  "ts-node.compilerOptions.inlineSourceMap": {
    "message": "在发出的 JavaScript 中包含 SourceMap 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#inlineSourceMap"
  },
  "ts-node.compilerOptions.inlineSources": {
    "message": "在发出的 JavaScript 内的 SourceMaps 中包含源代码。",
    "link": " https://www.typescriptlang.org/tsconfig#inlineSources"
  },
  "ts-node.compilerOptions.jsx": {
    "message": "指定生成的 JSX 代码。"
  },
  "ts-node.compilerOptions.reactNamespace": {
    "message": "指定为“createElement ”调用的对象。这仅适用于以“REACT ”JSX EMIT 为目标时。",
    "link": " https://www.typescriptlang.org/tsconfig#reactNamespace"
  },
  "ts-node.compilerOptions.jsxFactory": {
    "message": "指定以 React JSX Emit 为目标时使用的 JSX 工厂函数，例如' react.createElement '或' H '。",
    "link": " https://www.typescriptlang.org/tsconfig#jsxFactory"
  },
  "ts-node.compilerOptions.jsxFragmentFactory": {
    "message": "指定以 React JSX Emit 为目标时用于片段的 JSX 片段引用，例如' react.fragment '或' fragment '。",
    "link": " https://www.typescriptlang.org/tsconfig#jsxFragmentFactory"
  },
  "ts-node.compilerOptions.jsxImportSource": {
    "message": "使用 `jsx：react-jsx` 时，指定用于导入 JSX 工厂函数的模块说明符。",
    "link": " https://www.typescriptlang.org/tsconfig#jsxImportSource"
  },
  "ts-node.compilerOptions.listFiles": {
    "message": "打印编译期间读取的所有文件。",
    "link": " https://www.typescriptlang.org/tsconfig#listFiles"
  },
  "ts-node.compilerOptions.mapRoot": {
    "message": "指定调试器应查找映射文件的位置，而不是生成的位置。",
    "link": " https://www.typescriptlang.org/tsconfig#mapRoot"
  },
  "ts-node.compilerOptions.module": {
    "message": "指定生成的模块代码。",
    "link": " https://www.typescriptlang.org/tsconfig#module"
  },
  "ts-node.compilerOptions.moduleDetection": {
    "message": "控制用什么方式检测一个 JS 文件是否为模块。"
  },
  "ts-node.compilerOptions.moduleResolution": {
    "message": "指定 TypeScript 如何从给定的模块说明符查找文件。",
    "link": " https://www.typescriptlang.org/tsconfig#moduleResolution"
  },
  "ts-node.compilerOptions.moduleSuffixes": {
    "message": "解析模块时要搜索的文件名后缀的列表。",
    "link": " https://www.typescriptlang.org/tsconfig#moduleSuffixes"
  },
  "ts-node.compilerOptions.newLine": {
    "message": "设置发射文件的换行符。",
    "link": " https://www.typescriptlang.org/tsconfig#newLine"
  },
  "ts-node.compilerOptions.noEmit": {
    "message": "禁止从编译中发出文件。",
    "link": " https://www.typescriptlang.org/tsconfig#noEmit"
  },
  "ts-node.compilerOptions.noEmitHelpers": {
    "message": "禁止在编译输出中生成自定义辅助函数，如“扩展”。",
    "link": " https://www.typescriptlang.org/tsconfig#noEmitHelpers"
  },
  "ts-node.compilerOptions.noEmitOnError": {
    "message": "如果报告了任何类型检查错误，则禁用发出文件。",
    "link": " https://www.typescriptlang.org/tsconfig#noEmitOnError"
  },
  "ts-node.compilerOptions.noImplicitAny": {
    "message": "为隐含“任何”类型的表达式和声明启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitAny"
  },
  "ts-node.compilerOptions.noImplicitThis": {
    "message": "当给定“this ”的类型为“any ”时，启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitThis"
  },
  "ts-node.compilerOptions.noUnusedLocals": {
    "message": "未读取局部变量时启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noUnusedLocals"
  },
  "ts-node.compilerOptions.noUnusedParameters": {
    "message": "未读取函数参数时引发错误。",
    "link": " https://www.typescriptlang.org/tsconfig#noUnusedParameters"
  },
  "ts-node.compilerOptions.noLib": {
    "message": "禁止包括任何库文件，包括默认的 lib.d.ts.",
    "link": " https://www.typescriptlang.org/tsconfig#noLib"
  },
  "ts-node.compilerOptions.noResolve": {
    "message": "禁止“import ”、“require ”或“<reference>'s ”扩展 TypeScript 应添加到项目中的文件数量。",
    "link": " https://www.typescriptlang.org/tsconfig#noResolve"
  },
  "ts-node.compilerOptions.noStrictGenericChecks": {
    "message": "在函数类型中禁用对泛型签名的严格检查。",
    "link": " https://www.typescriptlang.org/tsconfig#noStrictGenericChecks"
  },
  "ts-node.compilerOptions.skipDefaultLibCheck": {
    "message": "跳过 TypeScript 附带的.d.ts 文件的类型检查。",
    "link": " https://www.typescriptlang.org/tsconfig#skipDefaultLibCheck"
  },
  "ts-node.compilerOptions.skipLibCheck": {
    "message": "跳过对所有.d.ts 文件的类型检查。",
    "link": " https://www.typescriptlang.org/tsconfig#skipLibCheck"
  },
  "ts-node.compilerOptions.outFile": {
    "message": "指定将所有输出捆绑到一个 JavaScript 文件中的文件。如果“declaration ”为 true，则还指定捆绑所有.d.ts 输出的文件。",
    "link": " https://www.typescriptlang.org/tsconfig#outFile"
  },
  "ts-node.compilerOptions.outDir": {
    "message": "为所有发出的文件指定输出文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#outDir"
  },
  "ts-node.compilerOptions.preserveConstEnums": {
    "message": "在生成的代码中禁用删除“const num ”声明。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveConstEnums"
  },
  "ts-node.compilerOptions.preserveSymlinks": {
    "message": "禁用将符号链接解析到其 realpath.这与节点中的相同标志相关。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveSymlinks"
  },
  "ts-node.compilerOptions.preserveValueImports": {
    "message": "在 JavaScript 输出中保留未使用的导入值，否则这些值将被删除。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveValueImports"
  },
  "ts-node.compilerOptions.preserveWatchOutput": {
    "message": "在“监视”模式下禁用擦除控制台。",
    "link": " https://www.typescriptlang.org/tsconfig#preserveWatchOutput"
  },
  "ts-node.compilerOptions.pretty": {
    "message": "使用漂亮的诊断格式化程序。"
  },
  "ts-node.compilerOptions.removeComments": {
    "message": "禁用发出注释。",
    "link": " https://www.typescriptlang.org/tsconfig#removeComments"
  },
  "ts-node.compilerOptions.rootDir": {
    "message": "指定源文件中的根文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#rootDir"
  },
  "ts-node.compilerOptions.isolatedModules": {
    "message": "确保每个文件都可以安全地传输，而不依赖于其他导入。",
    "link": " https://www.typescriptlang.org/tsconfig#isolatedModules"
  },
  "ts-node.compilerOptions.sourceMap": {
    "message": "为发出的 JavaScript 文件创建源映射文件。",
    "link": " https://www.typescriptlang.org/tsconfig#sourceMap"
  },
  "ts-node.compilerOptions.sourceRoot": {
    "message": "指定调试器查找引用源代码的根路径。",
    "link": " https://www.typescriptlang.org/tsconfig#sourceRoot"
  },
  "ts-node.compilerOptions.suppressExcessPropertyErrors": {
    "message": "禁止在创建对象文本期间报告过多的属性错误。",
    "link": " https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors"
  },
  "ts-node.compilerOptions.suppressImplicitAnyIndexErrors": {
    "message": "为缺少索引签名的对象编制索引时隐藏“noimplicitany ”错误。",
    "link": " https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors"
  },
  "ts-node.compilerOptions.stripInternal": {
    "message": "禁用在其 JSDoc 注释中包含“@internal ”的发出声明。",
    "link": " https://www.typescriptlang.org/tsconfig#stripInternal"
  },
  "ts-node.compilerOptions.target": {
    "message": "为发出的 JavaScript 设置 JavaScript 语言版本，并包含兼容的库声明。",
    "link": " https://www.typescriptlang.org/tsconfig#target"
  },
  "ts-node.compilerOptions.useUnknownInCatchVariables": {
    "message": "默认 catch 子句变量为“unknown ”而不是“any ”。",
    "link": " https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables"
  },
  "ts-node.compilerOptions.experimentalDecorators": {
    "message": "启用对 TC39 阶段 2 草稿修饰符的实验性支持。",
    "link": " https://www.typescriptlang.org/tsconfig#experimentalDecorators"
  },
  "ts-node.compilerOptions.emitDecoratorMetadata": {
    "message": "为源文件中的修饰声明发出设计类型元数据。",
    "link": " https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"
  },
  "ts-node.compilerOptions.allowUnusedLabels": {
    "message": "禁用未使用标签的错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#allowUnusedLabels"
  },
  "ts-node.compilerOptions.noImplicitReturns": {
    "message": "为未在函数中显式返回的代码路径启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitReturns"
  },
  "ts-node.compilerOptions.noUncheckedIndexedAccess": {
    "message": "使用索引访问时，将“undefined ”添加到类型中。",
    "link": " https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess"
  },
  "ts-node.compilerOptions.noFallthroughCasesInSwitch": {
    "message": "为 switch 语句中的故障情况启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch"
  },
  "ts-node.compilerOptions.noImplicitOverride": {
    "message": "确保用 override 修饰符标记派生类中的重写成员。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitOverride"
  },
  "ts-node.compilerOptions.allowUnreachableCode": {
    "message": "对无法访问的代码禁用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#allowUnreachableCode"
  },
  "ts-node.compilerOptions.forceConsistentCasingInFileNames": {
    "message": "确保进口套管正确。",
    "link": " https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames"
  },
  "ts-node.compilerOptions.generateCpuProfile": {
    "message": "发出编译器运行的 V8 CPU 配置文件以进行调试。",
    "link": " https://www.typescriptlang.org/tsconfig#generateCpuProfile"
  },
  "ts-node.compilerOptions.baseUrl": {
    "message": "指定用于解析非相对模块名称的基目录。",
    "link": " https://www.typescriptlang.org/tsconfig#baseUrl"
  },
  "ts-node.compilerOptions.paths": {
    "message": "指定将导入重新映射到其他查找位置的一组条目。",
    "link": " https://www.typescriptlang.org/tsconfig#paths"
  },
  "ts-node.compilerOptions.plugins": {
    "message": "指定要包含的语言服务插件的列表。",
    "link": " https://www.typescriptlang.org/tsconfig#plugins"
  },
  "ts-node.compilerOptions.rootDirs": {
    "message": "允许在解析模块时将多个文件夹视为一个文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#rootDirs"
  },
  "ts-node.compilerOptions.typeRoots": {
    "message": "指定多个类似于“./node_ 模块/@types ”的文件夹。",
    "link": " https://www.typescriptlang.org/tsconfig#typeRoots"
  },
  "ts-node.compilerOptions.types": {
    "message": "指定要在源文件中包含但不引用的类型包名称。",
    "link": " https://www.typescriptlang.org/tsconfig#types"
  },
  "ts-node.compilerOptions.traceResolution": {
    "message": "启用名称解析过程的跟踪。需要 TypeScript 2.0 或更高版本。"
  },
  "ts-node.compilerOptions.allowJs": {
    "message": "允许 JavaScript 文件成为程序的一部分。使用“checkjs ”选项从这些文件中获取错误。",
    "link": " https://www.typescriptlang.org/tsconfig#allowJs"
  },
  "ts-node.compilerOptions.noErrorTruncation": {
    "message": "在错误消息中禁用截断类型。",
    "link": " https://www.typescriptlang.org/tsconfig#noErrorTruncation"
  },
  "ts-node.compilerOptions.allowSyntheticDefaultImports": {
    "message": "当模块没有默认导出时，允许“从 Y 导入 X ”。",
    "link": " https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports"
  },
  "ts-node.compilerOptions.noImplicitUseStrict": {
    "message": "禁止在发出的 JavaScript 文件中添加“使用严格”指令。",
    "link": " https://www.typescriptlang.org/tsconfig#noImplicitUseStrict"
  },
  "ts-node.compilerOptions.listEmittedFiles": {
    "message": "在编译后打印发出的文件的名称。",
    "link": " https://www.typescriptlang.org/tsconfig#listEmittedFiles"
  },
  "ts-node.compilerOptions.disableSizeLimit": {
    "message": "删除 TypeScript 语言服务器中 JavaScript 文件的总源代码大小的 20MB 上限。",
    "link": " https://www.typescriptlang.org/tsconfig#disableSizeLimit"
  },
  "ts-node.compilerOptions.lib": {
    "message": "指定一组描述目标运行时环境的捆绑库声明文件。",
    "link": " https://www.typescriptlang.org/tsconfig#lib"
  },
  "ts-node.compilerOptions.strictNullChecks": {
    "message": "检查类型时，请考虑“null ”和“undefined ”。",
    "link": " https://www.typescriptlang.org/tsconfig#strictNullChecks"
  },
  "ts-node.compilerOptions.maxNodeModuleJsDepth": {
    "message": "指定用于从“节点 _ 模块”检查 JavaScript 文件的最大文件夹深度。仅适用于“allowjs ”。",
    "link": " https://www.typescriptlang.org/tsconfig#maxNodeModuleJsDepth"
  },
  "ts-node.compilerOptions.importHelpers": {
    "message": "允许在每个项目中从 TSLIB 导入一次帮助程序函数，而不是在每个文件中包含它们。",
    "link": " https://www.typescriptlang.org/tsconfig#importHelpers"
  },
  "ts-node.compilerOptions.importsNotUsedAsValues": {
    "message": "为仅用于类型的导入指定发出/检查行为。"
  },
  "ts-node.compilerOptions.alwaysStrict": {
    "message": "确保始终发出“use strict ”。",
    "link": " https://www.typescriptlang.org/tsconfig#alwaysStrict"
  },
  "ts-node.compilerOptions.strict": {
    "message": "启用所有严格类型检查选项。",
    "link": " https://www.typescriptlang.org/tsconfig#strict"
  },
  "ts-node.compilerOptions.strictBindCallApply": {
    "message": "检查“bind ”、“call ”和“apply ”方法的参数是否与原始函数匹配。",
    "link": " https://www.typescriptlang.org/tsconfig#strictBindCallApply"
  },
  "ts-node.compilerOptions.downlevelIteration": {
    "message": "为迭代生成更兼容，但冗长且性能较低的 JavaScript.",
    "link": " https://www.typescriptlang.org/tsconfig#downlevelIteration"
  },
  "ts-node.compilerOptions.checkJs": {
    "message": "在类型检查的 JavaScript 文件中启用错误报告。",
    "link": " https://www.typescriptlang.org/tsconfig#checkJs"
  },
  "ts-node.compilerOptions.strictFunctionTypes": {
    "message": "分配函数时，请检查以确保参数和返回值是子类型兼容的。",
    "link": " https://www.typescriptlang.org/tsconfig#strictFunctionTypes"
  },
  "ts-node.compilerOptions.strictPropertyInitialization": {
    "message": "检查已声明但未在构造函数中设置的类属性。",
    "link": " https://www.typescriptlang.org/tsconfig#strictPropertyInitialization"
  },
  "ts-node.compilerOptions.esModuleInterop": {
    "message": "发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。这将为类型兼容性启用“AllowSyntheticDefaultImports ”。",
    "link": " https://www.typescriptlang.org/tsconfig#esModuleInterop"
  },
  "ts-node.compilerOptions.allowUmdGlobalAccess": {
    "message": "允许从模块访问 UMD 全局变量。",
    "link": " https://www.typescriptlang.org/tsconfig#allowUmdGlobalAccess"
  },
  "ts-node.compilerOptions.keyofStringsOnly": {
    "message": "使 KeyOf 只返回字符串，而不是字符串、数字或符号。传统选项。",
    "link": " https://www.typescriptlang.org/tsconfig#keyofStringsOnly"
  },
  "ts-node.compilerOptions.useDefineForClassFields": {
    "message": "发出符合 ECMAScript 标准的类字段。",
    "link": " https://www.typescriptlang.org/tsconfig#useDefineForClassFields"
  },
  "ts-node.compilerOptions.declarationMap": {
    "message": "为 D.TS 文件创建源映射。",
    "link": " https://www.typescriptlang.org/tsconfig#declarationMap"
  },
  "ts-node.compilerOptions.resolveJsonModule": {
    "message": "启用导入.JSON 文件。",
    "link": " https://www.typescriptlang.org/tsconfig#resolveJsonModule"
  },
  "ts-node.compilerOptions.resolvePackageJsonExports": {
    "message": "解析包导入时使用 package.JSON “exports ”字段。",
    "link": " https://www.typescriptlang.org/tsconfig#resolvePackageJsonExports"
  },
  "ts-node.compilerOptions.resolvePackageJsonImports": {
    "message": "解析导入时使用 package.JSON ' Imports '字段。",
    "link": " https://www.typescriptlang.org/tsconfig#resolvePackageJsonImports"
  },
  "ts-node.compilerOptions.verbatimModuleSyntax": {
    "message": "不要转换或忽略任何未标记为仅类型的导入或导出，确保根据“模块”设置以输出文件的格式写入它们。",
    "link": " https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax"
  },
  "ts-node.compilerOptions.assumeChangesOnlyAffectDirectDependencies": {
    "message": "在“--incremental ”和“--watch ”中重新编译时，假设文件中的更改只会影响直接依赖于它的文件。需要 TypeScript 3.8 或更高版本。"
  },
  "ts-node.compilerOptions.extendedDiagnostics": {
    "message": "生成后输出更详细的编译器性能信息。",
    "link": " https://www.typescriptlang.org/tsconfig#extendedDiagnostics"
  },
  "ts-node.compilerOptions.disableSourceOfProjectReferenceRedirect": {
    "message": "禁止在引用复合项目时首选源文件而不是声明文件。",
    "link": " https://www.typescriptlang.org/tsconfig#disableSourceOfProjectReferenceRedirect"
  },
  "ts-node.compilerOptions.disableSolutionSearching": {
    "message": "编辑时将项目从多项目引用检查中选择出来。",
    "link": " https://www.typescriptlang.org/tsconfig#disableSolutionSearching"
  },
  "ts-node.compilerOptions": {
    "message": "指示 TypeScript 编译器如何编译.ts 文件。"
  },
  "ts-node.compilerOptions.emit": {
    "message": "将输出文件发送到“.ts-node ”目录。"
  },
  "ts-node.compilerOptions.experimentalReplAwait": {
    "message": "允许在 REPL 中使用顶级等待。\n\n使用 Node 的实现，该实现通过 AST 语法转换来实现这一点。\n\n当 tsconfig 目标为 ES2018 或更高版本时，默认启用。设置为 false 以禁用。\n\n** 注意 **：当 tsconfig 目标太低时，设置为“true ”将引发错误。保留为“未定义”\n以获得默认的自动行为。"
  },
  "ts-node.compilerOptions.files": {
    "message": "启动时从“tsconfig.JSON ”加载“files ”和“include ”。\n\n默认设置是覆盖“tsconfig.JSON ”“files ”和“include ”以仅包含入口点脚本。"
  },
  "ts-node.compilerOptions.ignore": {
    "message": "不应编译的路径。\n\n数组中的每个字符串都通过“new regexp（）”转换为正则表达式，并在编译之前针对源路径进行测试。\n\n源路径被规范化为 POSIX 样式的分隔符，相对于包含“tsconfig.JSON ”的目录，或者相对于 CWD（如果未加载“tsconfig.JSON ”）。\n\n默认设置是忽略所有节点 _ 模块子目录。"
  },
  "ts-node.compilerOptions.ignoreDiagnostics": {
    "message": "忽略诊断代码发出的 TypeScript 警告。"
  },
  "ts-node.compilerOptions.logError": {
    "message": "将 TypeScript 错误记录到 stderr，而不是引发异常。"
  },
  "ts-node.compilerOptions.moduleTypes": {
    "message": "覆盖要作为 CommonJS 或 ECMAScript 模块编译和执行的某些路径。\n当被覆盖时，tsconfig “module ”和 package.JSON “type ”字段将被覆盖。\n这很有用，因为 TypeScript 文件不能使用.cjs 或.mjs 文件扩展名。\n达到了同样的效果。\n\n每个键都是一个 glob 模式，遵循与 tsconfig 的“include ”数组相同的规则。\n当多个模式与同一文件匹配时，最后一个模式优先。\n\n“CJS ”覆盖匹配文件以作为 CommonJS 编译和执行。\n“ESM ”覆盖匹配文件，以作为本机 ECMAScript 模块进行编译和执行。\n“package ”将上述任何一项覆盖为默认行为，默认行为遵循 package.JSON “type ”和\ntsconfig.JSON “模块”选项。"
  },
  "ts-node.compilerOptions.preferTsExts": {
    "message": "重新排序文件扩展名，以便优先使用 TypeScript 导入。\n\n例如，当“index.JS ”和“index.ts ”都存在时，启用此选项会导致“require（'./index '）”解析为“index.ts ”，而不是“Index.JS ”"
  },
  "ts-node.compilerOptions.require": {
    "message": "需要的模块，如节点的“--require ”标志。\n\n如果在“tsconfig.JSON ”中指定，则将相对于“tsconfig.JSON ”文件解析模块。\n\n如果以编程方式指定，则每个输入字符串都应预先解析为\n最好的结果。"
  },
  "ts-node.compilerOptions.scope": {
    "message": "将编译器作用域设置为“scopedir ”中的文件。"
  },
  "ts-node.compilerOptions.scopeDir": {},
  "ts-node.compilerOptions.skipIgnore": {
    "message": "跳过忽略检查，以便尝试编译具有匹配扩展名的所有文件。"
  },
  "ts-node.compilerOptions.transpileOnly": {
    "message": "使用 TypeScript 更快的“转换模式”。"
  },
  "ts-node.compilerOptions.transpiler": {
    "message": "指定用于 TranspileOnly 的自定义 Transpiler"
  },
  "ts-node.compilerOptions.typeCheck": {
    "message": "** 不建议使用 ** 指定启用类型检查（例如 `transpileonly==false`）。"
  },
  "ts-node": {
    "message": "TS-节点选项。另请参阅：https：//typestrong.org/ts-node/docs/configuration.\n\nTS-Node 为 Node.JS 提供 TypeScript 执行和 REPL，并提供源映射支持。"
  }
}